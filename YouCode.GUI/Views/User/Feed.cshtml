@using YouCode.GUI.Components.Icons
@model IEnumerable<YouCode.GUI.Services.PostDto>
@{
    ViewData["Title"] = "Feed";
}

<div class="w-full flex flex-col items-center" id="contendor-post">
    @foreach (var post in Model)
    {
        <div class="bg-white border rounded-sm max-w-md my-3 w-full post-item-render" id="post-@post.Id">
            <div class="flex items-center px-4 py-3">
                <img class="h-8 w-8 rounded-full" src="@post.UserProfile.AvatarUrl" />
                <div class="ml-3 ">
                    <span class="text-sm font-semibold antialiased block leading-tight">@post.User.Name</span>
                    <!-- Asumiendo que User tiene una propiedad 'Name' -->
                    <span class="text-gray-600 text-xs block">@post.PostedAt.ToString("MMMM dd, yyyy")</span>
                </div>
            </div>
            <div class="px-2">
                <h2 class="font-semibold text-gray-800">@post.Title</h2>
                <p class="text-[12px]">@post.Content</p>
            </div>

            @* *@

            @if (post.Images.Any())
            {
                <div id="controls-carousel" class="relative w-full" data-carousel="static">
                    <!-- Carousel wrapper -->
                    <div class="relative h-56 overflow-hidden rounded-lg md:h-96">
                        <!-- Item 1 -->
                        @foreach (var image in post.Images)
                        {
                            <div class="hidden duration-700 ease-in-out" data-carousel-item="active">
                                <img src="@image.Path" alt="post image" 
                                    class="absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 aspect-w-16 aspect-h-9 object-cover">
                            </div>
                        }
                    </div>
                    <!-- Slider controls -->
                    <button type="button"
                        class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
                        data-carousel-prev>
                        <span
                            class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                            <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M5 1 1 5l4 4" />
                            </svg>
                            <span class="sr-only">Previous</span>
                        </span>
                    </button>
                    <button type="button"
                        class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
                        data-carousel-next>
                        <span
                            class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                            <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="m1 9 4-4-4-4" />
                            </svg>
                            <span class="sr-only">Next</span>
                        </span>
                    </button>
                </div>
            }

            @* *@

            @* @ViewBag.User.Id     *@

            <div class="flex items-center justify-between mx-4 mt-3 mb-2">
                <div class="flex gap-5">
                    <!-- SVG de Corazón (Me gusta) -->

                    @namespace YouCode.GUI.Components.Icons

                    <svg onclick="setLike(@post.Id)" class="hover" width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g id="hear 1" clip-path="url(#clip0_31_2)">
                    <g id="hear - copia 1">
                    <path class="hidden" id="like-green" d="M19.4048 5.62257C18.9072 5.1089 18.3155 4.70111 17.6636 4.42265C17.0117 4.14419 16.3126 4.00055 15.6064 4C14.2706 4.00022 12.9836 4.51459 12.0002 5.44126C11.0169 4.51443 9.72986 4.00004 8.39404 4C7.68701 4.00075 6.9871 4.14483 6.3346 4.42393C5.6821 4.70303 5.08988 5.11165 4.59203 5.62627C2.46857 7.81221 2.46947 11.2313 4.59384 13.408L12.0002 21L19.4066 13.408C21.531 11.2313 21.5319 7.81221 19.4048 5.62257Z" fill="#4FDC54"/>
                    <path id="like-gray" d="M12 4.59511C10.9104 3.59321 9.48419 3.03716 8.00398 3.03711C7.22052 3.03793 6.44495 3.19367 5.72192 3.49538C4.99888 3.79709 4.34265 4.2388 3.79098 4.79511C1.43798 7.15811 1.43898 10.8541 3.79298 13.2071L11.125 20.5391C11.295 20.8381 11.623 21.0311 12 21.0311C12.1548 21.0296 12.3071 20.9918 12.4446 20.9208C12.5822 20.8498 12.7011 20.7475 12.792 20.6221L20.207 13.2071C22.561 10.8531 22.561 7.15811 20.205 4.79111C19.6536 4.23583 18.9979 3.79501 18.2756 3.49399C17.5532 3.19298 16.7785 3.03771 15.996 3.03711C14.5158 3.03735 13.0897 3.59338 12 4.59511ZM18.791 6.20511C20.354 7.77611 20.355 10.2301 18.793 11.7931L12 18.5861L5.20698 11.7931C3.64498 10.2301 3.64598 7.77611 5.20498 6.20911C5.96498 5.45311 6.95898 5.03711 8.00398 5.03711C9.04898 5.03711 10.039 5.45311 10.793 6.20711L11.293 6.70711C11.3858 6.80006 11.496 6.87379 11.6173 6.9241C11.7386 6.97441 11.8686 7.00031 12 7.00031C12.1313 7.00031 12.2614 6.97441 12.3827 6.9241C12.504 6.87379 12.6142 6.80006 12.707 6.70711L13.207 6.20711C14.719 4.69811 17.281 4.70211 18.791 6.20511Z" fill="#4F4F5E"/>
                    </g>
                    </g>
                    <defs>
                    <clipPath id="clip0_31_2">
                    <rect width="24" height="24" fill="white"/>
                    </clipPath>
                    </defs>
                    </svg>

                    <!-- SVG de Comentario -->
                    <svg fill="#262626" height="24" viewBox="0 0 48 48" width="24">
                        <path
                            d="M47.8 3.8c-.3-.5-.8-.8-1.3-.8h-45C.9 3.1.3 3.5.1 4S0 5.2.4 5.7l15.9 15.6 5.5 22.6c.1.6.6 1 1.2 1.1h.2c.5 0 1-.3 1.3-.7l23.2-39c.4-.4.4-1 .1-1.5zM5.2 6.1h35.5L18 18.7 5.2 6.1zm18.7 33.6l-4.4-18.4L42.4 8.6 23.9 39.7z">
                        </path>
                    </svg>
                </div>
                <div class="flex">
                    <!-- SVG de Compartir -->
                    <svg fill="#262626" height="24" viewBox="0 0 48 48" width="24">
                        <path
                            d="M43.5 48c-.4 0-.8-.2-1.1-.4L24 29 5.6 47.6c-.4.4-1.1.6-1.6.3-.6-.2-1-.8-1-1.4v-45C3 .7 3.7 0 4.5 0h39c.8 0 1.5.7 1.5 1.5v45c0 .6-.4 1.2-.9 1.4-.2.1-.4.1-.6.1zM24 26c.8 0 1.6.3 2.2.9l15.8 16V3H6v39.9l15.8-16c.6-.6 1.4-.9 2.2-.9z">
                        </path>
                    </svg>
                </div>
            </div>
            <!-- La cantidad de 'likes' podría ser dinámica dependiendo de la lógica de la aplicación, aquí se usa un número estático como placeholder -->
            <div class="flex justify-between font-semibold text-sm mx-4 mt-2 mb-4">
                <span class="likes">@post.Reactions.Count Likes</span>
                <span>@post.FavoriteCount Saved</span>
            </div>

            @* propiedad oculta con un array de los usurios que dieron like *@
            <input type="hidden" value='@Json.Serialize(post.Reactions)' class="reactions" />
        </div>
    }
</div>


@section Scripts {
    <script>

        // obtener id del localStorage

        var stringId = localStorage.getItem('YCuserId')

        if(!stringId){
            alert('No se ha iniciado sesión');
        }

        var userId = parseInt(stringId);
        console.log(userId);
        // obtener el contenedor de los post
        const contenedorPost = document.getElementById('contendor-post');

        // obtener la lista de post
        const postItems = contenedorPost.querySelectorAll('.post-item-render');

        // recorrer los post, obtener la lista de reacciones y verificar si el usuario actual ya reaccionó
        postItems.forEach(postItem => {
            const reactions = JSON.parse(postItem.querySelector('.reactions').value);
            const likeGreen = postItem.querySelector('#like-green');
            const likeGray = postItem.querySelector('#like-gray');

            // verificar si el usuario actual ya reaccionó
            const userReaction = reactions.find(reaction => reaction.idUser == userId);

            console.log(userReaction);

            // si el usuario ya reaccionó, mostrar el corazón verde
            if (userReaction) {
                likeGreen.classList.remove('hidden');
                likeGray.classList.add('hidden');
            }
        });


        function setLike(postId) {
            // obtener el post
            const postItem = document.getElementById(`post-${postId}`);
            // obtener la lista de reacciones
            const reactions = JSON.parse(postItem.querySelector('.reactions').value);
            // verificar si el usuario actual ya reaccionó
            const userReaction = reactions.find(reaction => reaction.idUser == userId);

            // si el usuario ya reaccionó, eliminar la reacción
            if (userReaction) {
                // eliminar la reacción del array
                const index = reactions.indexOf(userReaction);
                reactions.splice(index, 1);
                // actualizar la lista de reacciones
                postItem.querySelector('.reactions').value = JSON.stringify(reactions);
                // actualizar la cantidad de likes
                postItem.querySelector('.likes').innerText = `${reactions.length} Likes`;
                // cambiar el color del corazón
                postItem.querySelector('#like-green').classList.add('hidden');
                postItem.querySelector('#like-gray').classList.remove('hidden');
            } else {
                // si el usuario no ha reaccionado, agregar la reacción
                reactions.push({ idUser: userId });
                // actualizar la lista de reacciones
                postItem.querySelector('.reactions').value = JSON.stringify(reactions);
                // actualizar la cantidad de likes
                postItem.querySelector('.likes').innerText = `${reactions.length} Likes`;
                // cambiar el color del corazón
                postItem.querySelector('#like-green').classList.remove('hidden');
                postItem.querySelector('#like-gray').classList.add('hidden');
            }
        }

    </script>
}