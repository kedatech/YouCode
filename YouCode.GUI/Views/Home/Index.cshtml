@model IEnumerable<YouCode.GUI.Models.DTOs.PostDto>
@{
    ViewData["Title"] = "Feed";
}
@* dividir en vista desktop en dos columnas en proporciona 1 3 *@
<main class="max-w-5xl relative mx-auto w-full grid md:grid-cols-10 gap-0">
<div id="toastContainer" class="fixed bottom-0 left-0 z-50 flex flex-col items-start p-6 gap-4"></div>




    <div class="w-full px-4 flex flex-col items-center md:col-span-7" id="contendor-post">
        @if(ViewBag.IsLoggued)
        {
            <div class="bg-gray-200 rounded-lg p-6 w-full my-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <span class="h-12 w-12 rounded-full bg-cover mr-4"
                            style="background-size: cover; background-repeat: no-repeat; background-position: center center; background-image: url('@ViewBag.AvatarUrl');"></span>
                    </div>
                    <input readonly onclick="openModal('NewPostModal')" type="text" placeholder="¿Qué piensas?"
                        class="w-full border rounded-md p-2 focus:outline-none focus:ring focus:border-blue-300">
                </div>
            </div>
        }
        else
        {
            <div class="bg-gray-100 rounded-lg p-6 w-full my-4">
                <div class="flex items-center justify-center">
                    <a asp-action="Redirect" asp-controller="Auth"><h2 class="font-semibold text-lg text-center hover:underline">¿Qué tal si inicias sesión?</h2></a>
                    <svg class="w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <img src="/Images/github-mark.svg" alt="Profile" class="w-12 mr-2">
                    </svg>
                </div>
            </div>
        }






        @foreach (var post in Model)
        {
            <div class="bg-white border rounded-sm w-full mb-3 w-full post-item-render" id="post-@post.Id">


                <div class="flex justify-between ">
                <div class="flex items-center px-4 py-2">
                        <a asp-action="Profile" asp-controller="User" asp-route-username="@post.User.Username">
                            <div class="flex items-center px-4 py-2">
                                <span class="h-12 w-12 rounded-full bg-cover"
                                style="background-size: cover; background-repeat: no-repeat; background-position: center center; background-image: url('@post.UserProfile.AvatarUrl');"></span>
                                <div class="ml-3 ">
                                    <span class="text-md font-semibold antialiased block leading-tight">@post.User.Name <span
                                        class="text-gray-600"><text>@@</text>@post.User.Username</span></span>
                                    <!-- Asumiendo que User tiene una propiedad Name -->
                                    <span class="text-gray-600 text-xs block">@post.PostedAt.ToString("MMMM dd, yyyy")</span>
                                </div>
                            </div>
                        </a>
                    </div>
                
                <div class="relative inline-block text-left p-3">
                    
                    
                    @if(ViewBag.IsLoggued)
                    {
                        <div>
                            <button onclick="openModal('OptionsModal-@post.Id', '@post.Id', true, '@post.User.Username')" type="button" class="inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50" id="OptionButton">
                                Opciones
                            </button>

                        </div>
                        <div id="OptionsModal-@post.Id" class="z-[100] fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
                            <input id="idPostHidden-@post.Id" hidden>
                            <input id="UserNamePostHidden-@post.Id" hidden>
                            
                            <div class="bg-white p-2 rounded-md w-96">
                                <div class="flex justify-between items-center pb-2">
                                    <h2 class="text-lg font-semibold m-2">Opciones de la publicación</h2>
                                    <button onclick="closeModal('OptionsModal-@post.Id','@post.Id', true, '@post.User.Username')" class="text-gray-500 hover:text-gray-700 focus:outline-none m-2">
                                        <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                                <div class="w-full p-3 flex flex-col">
                                    
                                    <input id='EditPostTitleValue-@post.Id' type="hidden" hidden class="hidden" value="@post.Title">
                                    <input id='EditPostContentValue-@post.Id' type="hidden" hidden class="hidden" value="@post.Content">

                                <button onclick="openModal('EditPostModal', '@post.Id')" hidden id="editPostButton-@post.Id" class="hidden flex items-center justify-start p-3 text-left space-x-2 hover:bg-gray-100 focus:outline-none rounded-md">
                                        <div class="flex flex-row">
                                            <svg class="w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <img src="/Images/edit.svg" alt="Profile" class="w-6 mr-2">
                                            </svg>
                                            <span class="mx-2">Editar</span>
                                        </div>
                                    </button>

                                    <button onclick="deletePost('@post.Id')" hidden id="deletePostButton-@post.Id" class="hidden flex items-center justify-start p-3 text-left space-x-2 hover:bg-gray-100 focus:outline-none rounded-md">
                                        <div class="flex flex-row">
                                            <svg class="w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <img src="/Images/delete.svg" alt="Profile" class="w-6 mr-2">
                                            </svg>
                                            <span class="mx-2">Eliminar</span>
                                        </div>
                                    </button>
                                    <button class="flex items-center justify-start p-3 text-left space-x-2 hover:bg-gray-100 focus:outline-none rounded-md">
                                        <div class="flex flex-row">
                                            <svg class="w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <img src="/Images/like-options.svg" alt="Profile" class="w-6 mr-2">
                                            </svg>
                                            <span class="mx-2">Ver Likes</span>
                                        </div>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                </div>
                
                

            </div>
                <div class="px-2 h-min">
                    <h2 class="font-semibold text-gray-800">@post.Title</h2>
                    @if (ViewBag.PostsHtml != null)
                    {
                        bool found = false;
                        foreach (var postHtml in ViewBag.PostsHtml)
                        {
                            if (postHtml.Id == post.Id)
                            {

                                <div class="p-4 overflow-auto">
                                    <p class="">@Html.Raw(postHtml.ContentHtml)</p>
                                </div>


                                found = true;
                                break;
                            }
                        }
                        if (!found)
                        {
                            <p class="text-[12px]">@post.Content</p>
                        }
                    }
                    else
                    {
                        <p class="text-[12px]">@post.Content</p>
                    }
                </div>

                @* *@

                @if (post.Images.Any())
                {
                    <div id="controls-carousel" class="relative w-full z-10" data-carousel="static">
                        <!-- Carousel wrapper -->
                        <div class="relative h-56 overflow-hidden  md:h-96">
                            <!-- Item 1 -->
                            @foreach (var image in post.Images)
                            {
                                <div class="hidden duration-700 ease-in-out" data-carousel-item="active">
                                    <img src="@image.Path" alt="post"
                                        class="absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 aspect-w-16 aspect-h-9 object-cover">
                                </div>
                            }
                        </div>
                         <!-- Slider controls -->
                        @if (post.Images.Count > 1)
                        {
                            <button type="button"
                                class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
                                data-carousel-prev>
                                <span
                                    class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/50 group-hover:bg-white/50 group-focus:outline-none border border-gray-600">
                                    <svg class="w-4 h-4 text-white" aria-hidden="true"
                                        xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                        <path stroke="#333" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M5 1 1 5l4 4" />
                                    </svg>
                                    <span class="sr-only">Previous</span>
                                </span>
                            </button>
                            <button type="button"
                                class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
                                data-carousel-next>
                                <span
                                    class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 group-hover:bg-white/50 group-focus:outline-none border border-gray-600">
                                    <svg class="w-4 h-4 text-white" aria-hidden="true"
                                        xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                        <path stroke="#333" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="m1 9 4-4-4-4" />
                                    </svg>
                                    <span class="sr-only">Next</span>
                                </span>
                            </button>
                        }
                    </div>
                }

                @* *@

                @* @ViewBag.User.Id *@

                <div class="flex items-center justify-between mx-4 mt-3 mb-2">
                    <div class="flex gap-5">
                        <!-- SVG de Corazón (Me gusta) -->

                        <svg class="hover btn-like" width="30" height="30" viewBox="0 0 24 24"
                            fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g id="hear 1" clip-path="url(#clip0_31_2)">
                                <g id="hear - copia 1">
                                    <path class="hidden" id="like-green"
                                        d="M19.4048 5.62257C18.9072 5.1089 18.3155 4.70111 17.6636 4.42265C17.0117 4.14419 16.3126 4.00055 15.6064 4C14.2706 4.00022 12.9836 4.51459 12.0002 5.44126C11.0169 4.51443 9.72986 4.00004 8.39404 4C7.68701 4.00075 6.9871 4.14483 6.3346 4.42393C5.6821 4.70303 5.08988 5.11165 4.59203 5.62627C2.46857 7.81221 2.46947 11.2313 4.59384 13.408L12.0002 21L19.4066 13.408C21.531 11.2313 21.5319 7.81221 19.4048 5.62257Z"
                                        fill="#4FDC54" />
                                    <path id="like-gray"
                                        d="M12 4.59511C10.9104 3.59321 9.48419 3.03716 8.00398 3.03711C7.22052 3.03793 6.44495 3.19367 5.72192 3.49538C4.99888 3.79709 4.34265 4.2388 3.79098 4.79511C1.43798 7.15811 1.43898 10.8541 3.79298 13.2071L11.125 20.5391C11.295 20.8381 11.623 21.0311 12 21.0311C12.1548 21.0296 12.3071 20.9918 12.4446 20.9208C12.5822 20.8498 12.7011 20.7475 12.792 20.6221L20.207 13.2071C22.561 10.8531 22.561 7.15811 20.205 4.79111C19.6536 4.23583 18.9979 3.79501 18.2756 3.49399C17.5532 3.19298 16.7785 3.03771 15.996 3.03711C14.5158 3.03735 13.0897 3.59338 12 4.59511ZM18.791 6.20511C20.354 7.77611 20.355 10.2301 18.793 11.7931L12 18.5861L5.20698 11.7931C3.64498 10.2301 3.64598 7.77611 5.20498 6.20911C5.96498 5.45311 6.95898 5.03711 8.00398 5.03711C9.04898 5.03711 10.039 5.45311 10.793 6.20711L11.293 6.70711C11.3858 6.80006 11.496 6.87379 11.6173 6.9241C11.7386 6.97441 11.8686 7.00031 12 7.00031C12.1313 7.00031 12.2614 6.97441 12.3827 6.9241C12.504 6.87379 12.6142 6.80006 12.707 6.70711L13.207 6.20711C14.719 4.69811 17.281 4.70211 18.791 6.20511Z"
                                        fill="#4F4F5E" />
                                </g>
                            </g>
                            <defs>
                                <clipPath id="clip0_31_2">
                                    <rect width="24" height="24" fill="white" />
                                </clipPath>
                            </defs>
                        </svg>

                        <!-- SVG de Comentario -->
                        @if(ViewBag.IsLoggued)
                        {
                            <svg class="hover btn-comment" width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g id="Frame">
                                    <path class="hidden" 
                                    id="comment-green" d="M12 2C6.486 2 2 5.589 2 10C2 12.908 3.897 15.516 7 16.934V22L12.34 17.996C17.697 17.852 22 14.32 22 10C22 5.589 17.514 2 12 2ZM9.5 11C9.10218 11 8.72064 10.842 8.43934 10.5607C8.15804 10.2794 8 9.89782 8 9.5C8 9.10218 8.15804 8.72064 8.43934 8.43934C8.72064 8.15804 9.10218 8 9.5 8C9.89782 8 10.2794 8.15804 10.5607 8.43934C10.842 8.72064 11 9.10218 11 9.5C11 9.89782 10.842 10.2794 10.5607 10.5607C10.2794 10.842 9.89782 11 9.5 11ZM14.5 11C14.1022 11 13.7206 10.842 13.4393 10.5607C13.158 10.2794 13 9.89782 13 9.5C13 9.10218 13.158 8.72064 13.4393 8.43934C13.7206 8.15804 14.1022 8 14.5 8C14.8978 8 15.2794 8.15804 15.5607 8.43934C15.842 8.72064 16 9.10218 16 9.5C16 9.89782 15.842 10.2794 15.5607 10.5607C15.2794 10.842 14.8978 11 14.5 11Z" fill="#4FDC54"/>
                                    <g id="comment-gray">
                                    <path id="Vector" d="M9.5 11C10.3284 11 11 10.3284 11 9.5C11 8.67157 10.3284 8 9.5 8C8.67157 8 8 8.67157 8 9.5C8 10.3284 8.67157 11 9.5 11Z" fill="#4F4F5E"/>
                                    <path id="Vector_2" d="M14.5 11C15.3284 11 16 10.3284 16 9.5C16 8.67157 15.3284 8 14.5 8C13.6716 8 13 8.67157 13 9.5C13 10.3284 13.6716 11 14.5 11Z" fill="#4F4F5E"/>
                                    <path id="Vector_3" d="M12 2C6.486 2 2 5.589 2 10C2 12.908 3.897 15.515 7 16.934V22L12.34 17.996C17.697 17.852 22 14.32 22 10C22 5.589 17.514 2 12 2ZM12 16H11.667L9 18V15.583L8.359 15.336C5.671 14.301 4 12.256 4 10C4 6.691 7.589 4 12 4C16.411 4 20 6.691 20 10C20 13.309 16.411 16 12 16Z" fill="#4F585D"/>
                                    </g>
                                </g>
                            </svg>
                        }
                        else
                        {
                            <svg onclick="openModal('LoginWarningModal')" class="" width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g id="Frame">
                                <path class="hidden" 
                                id="comment-green" d="M12 2C6.486 2 2 5.589 2 10C2 12.908 3.897 15.516 7 16.934V22L12.34 17.996C17.697 17.852 22 14.32 22 10C22 5.589 17.514 2 12 2ZM9.5 11C9.10218 11 8.72064 10.842 8.43934 10.5607C8.15804 10.2794 8 9.89782 8 9.5C8 9.10218 8.15804 8.72064 8.43934 8.43934C8.72064 8.15804 9.10218 8 9.5 8C9.89782 8 10.2794 8.15804 10.5607 8.43934C10.842 8.72064 11 9.10218 11 9.5C11 9.89782 10.842 10.2794 10.5607 10.5607C10.2794 10.842 9.89782 11 9.5 11ZM14.5 11C14.1022 11 13.7206 10.842 13.4393 10.5607C13.158 10.2794 13 9.89782 13 9.5C13 9.10218 13.158 8.72064 13.4393 8.43934C13.7206 8.15804 14.1022 8 14.5 8C14.8978 8 15.2794 8.15804 15.5607 8.43934C15.842 8.72064 16 9.10218 16 9.5C16 9.89782 15.842 10.2794 15.5607 10.5607C15.2794 10.842 14.8978 11 14.5 11Z" fill="#4FDC54"/>
                                <g id="comment-gray">
                                <path id="Vector" d="M9.5 11C10.3284 11 11 10.3284 11 9.5C11 8.67157 10.3284 8 9.5 8C8.67157 8 8 8.67157 8 9.5C8 10.3284 8.67157 11 9.5 11Z" fill="#4F4F5E"/>
                                <path id="Vector_2" d="M14.5 11C15.3284 11 16 10.3284 16 9.5C16 8.67157 15.3284 8 14.5 8C13.6716 8 13 8.67157 13 9.5C13 10.3284 13.6716 11 14.5 11Z" fill="#4F4F5E"/>
                                <path id="Vector_3" d="M12 2C6.486 2 2 5.589 2 10C2 12.908 3.897 15.515 7 16.934V22L12.34 17.996C17.697 17.852 22 14.32 22 10C22 5.589 17.514 2 12 2ZM12 16H11.667L9 18V15.583L8.359 15.336C5.671 14.301 4 12.256 4 10C4 6.691 7.589 4 12 4C16.411 4 20 6.691 20 10C20 13.309 16.411 16 12 16Z" fill="#4F585D"/>
                                </g>
                            </g>
                        </svg>
                        }


                    </div>
                    @if(ViewBag.IsLoggued)
                    {
                        <div class="flex">
                            <!-- SVG de Saved (Guardado) -->
                            <svg class="hover btn-favorite" width="30" height="30" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <g id="Frame">
                                    <path class="hidden" id="favorite-green"
                                        d="M5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0391 21 19.5304 21 19V8L16 3H5C4.46957 3 3.96086 3.21071 3.58579 3.58579C3.21071 3.96086 3 4.46957 3 5V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21ZM7 5H11V7H13V5H15V9H7V5ZM7 13H17V19H7V13Z"
                                        fill="#4FDC54" />
                                    <path id="favorite-gray"
                                        d="M5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0392 21 19.5305 21 19V8.00002C21.0008 7.86841 20.9755 7.73795 20.9258 7.61611C20.876 7.49427 20.8027 7.38346 20.71 7.29002L16.71 3.29002C16.6166 3.19734 16.5057 3.12401 16.3839 3.07425C16.2621 3.02448 16.1316 2.99926 16 3.00002H5C4.46957 3.00002 3.96086 3.21073 3.58579 3.5858C3.21071 3.96088 3 4.46958 3 5.00002V19C3 19.5305 3.21071 20.0392 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21ZM15 19H9V14H15V19ZM13 7.00002H11V5.00002H13V7.00002ZM5 5.00002H7V9.00002H15V5.00002H15.59L19 8.41002V19H17V14C17 13.4696 16.7893 12.9609 16.4142 12.5858C16.0391 12.2107 15.5304 12 15 12H9C8.46957 12 7.96086 12.2107 7.58579 12.5858C7.21071 12.9609 7 13.4696 7 14V19H5V5.00002Z"
                                        fill="#4F4F5E" />
                                </g>
                            </svg>
                        </div>
                    }
                    else
                    {
                        <div class="flex">
                            <!-- SVG de Saved (Guardado) -->
                            <svg onclick="openModal('LoginWarningModal')" width="30" height="30" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <g id="Frame">
                                    <path class="hidden" id="favorite-green"
                                        d="M5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0391 21 19.5304 21 19V8L16 3H5C4.46957 3 3.96086 3.21071 3.58579 3.58579C3.21071 3.96086 3 4.46957 3 5V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21ZM7 5H11V7H13V5H15V9H7V5ZM7 13H17V19H7V13Z"
                                        fill="#4FDC54" />
                                    <path id="favorite-gray"
                                        d="M5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0392 21 19.5305 21 19V8.00002C21.0008 7.86841 20.9755 7.73795 20.9258 7.61611C20.876 7.49427 20.8027 7.38346 20.71 7.29002L16.71 3.29002C16.6166 3.19734 16.5057 3.12401 16.3839 3.07425C16.2621 3.02448 16.1316 2.99926 16 3.00002H5C4.46957 3.00002 3.96086 3.21073 3.58579 3.5858C3.21071 3.96088 3 4.46958 3 5.00002V19C3 19.5305 3.21071 20.0392 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21ZM15 19H9V14H15V19ZM13 7.00002H11V5.00002H13V7.00002ZM5 5.00002H7V9.00002H15V5.00002H15.59L19 8.41002V19H17V14C17 13.4696 16.7893 12.9609 16.4142 12.5858C16.0391 12.2107 15.5304 12 15 12H9C8.46957 12 7.96086 12.2107 7.58579 12.5858C7.21071 12.9609 7 13.4696 7 14V19H5V5.00002Z"
                                        fill="#4F4F5E" />
                                </g>
                            </svg>
                        </div>
                    }

                </div>
                
                <div class="flex justify-between font-semibold text-sm mx-4 mt-2 mb-4">
                    <div class="">
                        <span class="likes text-gray-600">@post.Reactions.Count Likes</span>
                        <span class="comments text-gray-600">@post.Comments.Count Comentarios</span>
                    </div>
                    <span class="saves text-gray-600">@post.Favorites.Count Guardados</span>
                </div>


                <!-- component Commet GABY -->
                <!-- Tailwindcss V3 Script because here v3 is not supported -->
                <div class="justify-center items-center w-full pb-10 comment-component hidden">
                    <div class="w-[90%] mx-auto">
                        <textarea maxlength="260" id="commentContentInput-@post.Id" Name="Content" placeholder="Escribe tu comentario..." class="p-2 focus:outline-1 focus:outline-green-500 font-bold border-[0.1px] resize-none h-[120px] border-[#9EA5B1] rounded-md w-full"></textarea> <!-- Ajuste del ancho del textarea -->
                        <div class="flex justify-end">
                            <button onclick="submitComment('@post.Id')" id="ButtonsSubmitComment-@post.Id" type="submit" class="flex items-center justify-center text-sm font-semibold absolute bg-green-500 w-fit text-white py-2 rounded px-3">
                                Comentar
                                <svg class="ml-2" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" style="fill: #eee;transform: ;msFilter:;"><path d="m21.426 11.095-17-8A1 1 0 0 0 3.03 4.242l1.212 4.849L12 12l-7.758 2.909-1.212 4.849a.998.998 0 0 0 1.396 1.147l17-8a1 1 0 0 0 0-1.81z"></path></svg>
                            </button>
                        </div>
                    </div>

                    <div class="mt-10">
                        <div class="mx-4 "> 
                            @if(post.Comments.Count != 0)
                            {
                                <h2 class="p-2 text-xl font-bold text-gray-800">Otras personas comentaron</h2>
                            }
                            @foreach (var comment in post.Comments)
                            {
                                <div class="relative grid grid-cols-1 gap-4 p-4 mb-2 border rounded-lg bg-gray-100 ">
                                    <div class="relative flex gap-4">
                                        
                                        <img src="@comment.AvatarUrl" class="relative rounded-lg -top-4 -mb-4 bg-white border h-12 w-12" alt="" loading="lazy">
                                        <div class="flex flex-col flex-grow w-full">
                                            <div class="flex flex-row justify-between">
                                                <span class="text-md font-semibold antialiased block leading-tight">@comment.User.Name</span>
                                                <button  onclick="deleteComment('@comment.Id')" class="ButtonDeleteComment absolute top-0 right-0 mt-2 mr-2 hidden">
                                                    <input type="hidden" id="UserCommentIdValue" value="@comment.User.Username">
                                                    <!-- Agrega aquí tu ícono de eliminación -->
                                                    <!-- Por ejemplo, un ícono X de eliminación -->
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        @* <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/> *@
                                                        <img src="Images/delete.svg" class="w-6">
                                                    </svg>
                                                </button>
                                            </div>
                                            <span class="text-green-600 overflow-y-hidden flex-grow"><text>@@</text>@comment.User.Username</span>
                                        </div>
                                    </div>
                                    <div class="overflow-auto">
                                        <p class="text-md text-gray-600 mt-1" style="word-wrap: break-word;">@comment.Content</p>
                                    </div>
                                    

                                </div>


                            }
                        </div>

                    </div>
                </div>

                





                 @* propiedad oculta con un array de los usurios que dieron like *@
                <input type="hidden" value='@Json.Serialize(post.Reactions)' class="reactions" />
                <input type="hidden" value='@Json.Serialize(post.Favorites)' class="favorites" />
                <input type="hidden" value='@Json.Serialize(post.Comments)' class="comments" />
            </div>
    }
</div>

   @if(ViewBag.IsLoggued)
   {
     @*<-! WHO TO FOLLOW -->*@
        <section class="md:col-span-3 h-full">
            <article class="sticky top-[90px]">
                <div class="bg-gray-200 border rounded-md p-4">
                    <h2 class="font-semibold text-gray-800">¿A quién seguir?</h2>
                    <div class="mt-4 flex flex-wrap">
                        @foreach (var user in ViewBag.UsersToFollow)
                        {
                            @* <a asp-action="Profile" asp-controller="User" asp-route-username="@post.User.Username"> *@
                                <div 
                                    class="bg-white rounded-md p-2 my-2 w-full grid grid-cols-10 who-follow-render"
                                    itemid="@user.Id"
                                    data-username="@user.Username"
                                >
                                    <div class="col-span-2">
                                        <div class="aspect-w-1 aspect-h-1">
                                            <img src="@user.Profile.AvatarUrl" alt="User 1"
                                                class="object-cover w-full h-full p-2 rounded-full">
                                        </div>
                                    </div>
                                    <div class="col-span-5 flex flex-col w-full justify-center">
                                        <h3 class="font-semibold text-gray-800 text-sm">@user.Name</h3>
                                        <h3 class="font-semibold text-gray-500 text-sm"> @user.Username</h3>
                                    </div>

                                    <div class="col-span-3 px-2 py-4 flex justify-center items-center">
                                        <button
                                            class=" bg-[#45a448] max-h-5 hover:bg-[#5bc25f] text-white text-[13px] font-bold px-2 rounded">Seguir</button>
                                    </div>
                                </div>
                            @* </a> *@
                        }


                    </div>
                </div>
                
            </article>
        </section>
   }

</main>


<div id="NewPostModal" class="z-40 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <form enctype="multipart/form-data" id="postForm"
        class="editor mx-auto w-100 md:w-10/12 lg:w-8/12 xl:w-6/12 bg-white p-4 rounded-lg overflow-y-auto">
        <style>
            body {
                background: white !important;
            }
        </style>
        <input id="PostTitleInput" name="Title"
            class="title bg-gray-100 rounded-md border border-gray-300 p-2 mb-4 outline-none w-full" spellcheck="false"
            placeholder="Título" type="text">
        <textarea id="PostContentInput" name="Content" class="" spellcheck="false"
            placeholder="Escribe tu publicación aquí."></textarea>

        <div class="buttons flex">
            <div class="icons flex text-gray-500 m-1">
                <svg class="mr-2 cursor-pointer hover:text-gray-700 border rounded-full p-1 h-7"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                </svg>
            </div>
            <input id="InputFiles" name="Files" type="file" accept="image/*" multiple>
            <button type="button"
                class="btn border border-gray-300 p-1 px-5 rounded-md font-semibold cursor-pointer text-gray-500 ml-auto"
                onclick="closeModal('NewPostModal')">Cancelar</button>
            <button id="submitBtn" type="submit"
                class="btn border border-indigo-500 p-1 px-5 rounded-md font-semibold cursor-pointer text-gray-200 ml-2 bg-green-500">Publicar</button>
        </div>
    </form>
</div>

    <div id="EditPostModal" class="z-40 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
        <form enctype="multipart/form-data" id="editPostForm" class="editor mx-auto w-100 md:w-10/12 lg:w-8/12 xl:w-6/12 bg-white p-4 rounded-lg overflow-y-auto">
            <style>
                body {background:white !important;}
            </style>
            <input id="EditPostIdInput" type="hidden" name="Id">
            <input id="EditPostTitleInput" name="Title" class="title bg-gray-100 rounded-md border border-gray-300 p-2 mb-4 outline-none w-full" spellcheck="false" placeholder="Título" type="text">
            <textarea id="EditPostContentInput" name="Content" class="" spellcheck="false" placeholder="Escribe tu publicación aquí."></textarea>
            
            <div class="buttons flex">
                <div class="icons flex text-gray-500 m-1">
                    <svg class="mr-2 cursor-pointer hover:text-gray-700 border rounded-full p-1 h-7" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" /></svg>
                </div>
                <input id="EditInputFiles" name="Files" type="file" accept="image/*" multiple>
                <button type="button" class="btn border border-gray-300 p-1 px-5 rounded-md font-semibold cursor-pointer text-gray-500 ml-auto" onclick="closeModal('EditPostModal')">Cancelar</button>
                <button id="EditPostSubmitBtn" type="submit" class="btn border border-indigo-500 p-1 px-5 rounded-md font-semibold cursor-pointer text-gray-200 ml-2 bg-green-500">Publicar</button>
            </div>
        </form>
    </div>

<div id="spinnerOverlay" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div class="w-16 h-16 bg-white rounded-full flex items-center justify-center">
        <svg aria-hidden="true" class="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
            viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                fill="currentColor" />
            <path
                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                fill="currentFill" />
        </svg>
        <span class="sr-only">Loading...</span>
    </div>
</div>


<div id="LoginWarningModal" class="hidden fixed left-0 top-0 flex h-full w-full items-center justify-center bg-black bg-opacity-50 py-10 z-40">
<div class="max-h-full w-full max-w-xl overflow-y-auto sm:rounded-2xl bg-white z-50">
    <div class="w-full">
      <div class="m-8 my-20 max-w-[400px] mx-auto">
        <div class="mb-8">
          <div class="flex flex-row items-center mb-4 justify-center">
            <h1 class="text-3xl font-extrabold">Inicia Sesión</h1>
            <svg class="w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <img src="/Images/github-mark.svg" alt="Profile" class="w-12">
            </svg>
          </div>
          <p class="text-gray-600">Para poder interactuar con el sitio en su totalidad. Deberás de iniciar sesón con tu cuenta de gitub!</p>
        </div>
        <div class="space-y-4">
          <a asp-action="Redirect" asp-controller="Auth"><button class="p-3 bg-black rounded-md text-white w-full font-semibold">¡Iniciaré Sesión!</button></a>
          <button onclick="closeModal('LoginWarningModal')" class="p-3 bg-white border border-gray-500 rounded-md w-full font-semibold">Mejor después.</button>
        </div>
      </div>
    </div>
  </div>
</div>



@section Scripts {
    <script src="~/js/like-func.js" asp-append-version="true"></script>
    <script src="~/js/save-func.js" asp-append-version="true"></script>
    <script src="~/js/comment-func.js" asp-append-version="true"></script>
    <script src="~/js/follow-func.js" asp-append-version="true"></script>

    <style>
        .CodeMirror,
        .CodeMirror-scroll {
            min-height: 150px;
            max-height: 200px;
        }


        .CodeMirror {
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f7f7f7;
        }
        .toast {
        min-width: 300px;
        max-width: 400px;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: opacity 0.8s ease-in-out;
        display: flex;
        align-items: center;
        }

        .toast-info {
        background-color: #ebf8ff;
        color: #3182ce;
        }

        .toast-danger {
        background-color: #fed7d7;
        color: #e53e3e;
        }

        .toast-success {
        background-color: #d1fae5;
        color: #047857;
        }

        .toast-warning {
        background-color: #fefcbf;
        color: #b7791f;
        }

        .toast-close {
        cursor: pointer;
        }


    </style>

    <script>
       // Función para inicializar SimpleMDE
       var isUserLoggued = '@ViewBag.IsLogguedString' == "true";
       localStorage.setItem('UL', isUserLoggued);

        function initializeSimpleMDE(elementId) {
            return new SimpleMDE({
                element: document.getElementById(elementId),
                forceSync: true, // Fuerza la sincronización del contenido
                toolbar: ["code","bold", "link", "preview"],
                spellChecker: false,
                promptURLs: true,
                previewRender: function(plainText, preview) { // Async method
                    setTimeout(function(){
                        preview.innerHTML = customMarkdownParser(plainText);
                    }, 250);
                    return "Loading...";
                },
            });
        }

        var simplemde = initializeSimpleMDE("PostContentInput");
        var editPostMDE = initializeSimpleMDE("EditPostContentInput");

        // Funciones para abrir y cerrar modales
        function openModal(modalId, IdPostModalEdit=null, Validate=false, Username="") {
            document.getElementById(modalId).classList.remove('hidden');
            if(IdPostModalEdit !== null)
            {
                if(Validate)
                {
                    validateUserOwner(IdPostModalEdit, Username);
                }
                var content = $("#EditPostContentValue-"+IdPostModalEdit).val();
                var title = $("#EditPostTitleValue-"+IdPostModalEdit).val();
                loadEditPostContent(IdPostModalEdit, title, content)
            }

            
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
        }

        // Función para cargar contenido de edición de publicación
        function loadEditPostContent(IdPost, PostTitle, PostContent) {
            $("#EditPostContentInput").val(PostContent);
            $("#EditPostTitleInput").val(PostTitle);
            $("#EditPostIdInput").val(IdPost);
            editPostMDE.value(PostContent);
        }

        // Función para validar si el usuario es el propietario
        function validateUserOwner(IdPost, usernameToCompare) {
            $.ajax({
                url: '/Auth/ValidateUserOwner',
                type: 'GET',
                data: { username: usernameToCompare },
                success: function (response) {
                    if(response.is_owner) {
                        $("#deletePostButton-"+IdPost).show();
                        $("#editPostButton-"+IdPost).show();
                    } else {
                        $("#deletePostButton-"+IdPost).remove();
                        $("#editPostButton-"+IdPost).remove();
                    }
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }

        // Función para inicializar las publicaciones
        function initializePosts() {
            var userId = getUserId();
            //if (!userId) {
            //    alert('No se ha iniciado sesión');
            //    return;
            //}

            var postItems = document.querySelectorAll('.post-item-render');
            postItems.forEach(function (postItem) {
                setupPostItem(postItem, userId);
            });
        }

        // Función para configurar los elementos de publicación
        function setupPostItem(postItem, userId) {
            var reactions = JSON.parse(postItem.querySelector('.reactions').value);
            var likeGreen = postItem.querySelector('#like-green');
            var likeGray = postItem.querySelector('#like-gray');

            var userReaction = reactions.find(function (reaction) { return reaction.idUser === userId; });
            if (userReaction) {
                likeGreen.classList.remove('hidden');
                likeGray.classList.add('hidden');
            } else {
                likeGreen.classList.add('hidden');
                likeGray.classList.remove('hidden');
            }

            var likeBtn = postItem.querySelector('.hover'); // Asumiendo que la clase 'hover' se utiliza para el botón de 'Me gusta'
            likeBtn.onclick = function () { setLike(postItem, userId, reactions); };
        }

        // Refactorización para evitar el uso de una variable global 'requestInProgress'
        function setLike(postItem, userId, reactions) {
            var userReaction = reactions.find(function (reaction) { return reaction.idUser === userId; });
            var postId = postItem.getAttribute('id').split('-')[1]; // Obtener el ID del post desde el atributo 'id'

            if (userReaction) {
                removeLike(postItem, reactions, userReaction.id);
            } else {
                addLike(postItem, reactions, userId, postId);
            }
        }

        // Función para agregar un "Me gusta"
        function addLike(postItem, reactions, userId, postId) {

            if (!isUserLoggued) {
                openModal('LoginWarningModal');
                return;
            }

            var url = 'http://localhost:5069/api/reaction/';
            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ idUser: userId, idPost: postId })
            })
                .then(function (response) {
                    if (!response.ok) throw new Error('Falló la petición');
                    return response.json();
                })
                .then(function (data) {
                    reactions.push({ id: data.id, idUser: userId, idPost: postId }); // Asumiendo que la respuesta incluye un 'id' para la reacción
                    updateUIForLike(postItem, reactions);
                })
                .catch(function (error) {
                    console.error('Error:', error);
                });
        }

        // Función para quitar un "Me gusta"
        function removeLike(postItem, reactions, reactionId) {
            if (!isUserLoggued) {
                openModal('LoginWarningModal');
                return;
            }
            var url = `http://localhost:5069/api/reaction/${reactionId}`;
            fetch(url, { method: 'DELETE' })
                .then(function (response) {
                    if (!response.ok) throw new Error('Falló la petición');
                    var index = reactions.findIndex(function (reaction) { return reaction.id === reactionId; });
                    reactions.splice(index, 1);
                    updateUIForLike(postItem, reactions);
                })
                .catch(function (error) {
                    console.error('Error:', error);
                });
        }

        // Función para actualizar la interfaz de usuario para un "Me gusta"
        function updateUIForLike(postItem, reactions) {
            var likesCount = postItem.querySelector('.likes');
            likesCount.innerText = `${reactions.length} Likes`;
            var likeGreen = postItem.querySelector('#like-green');
            var likeGray = postItem.querySelector('#like-gray');
            likeGreen.classList.toggle('hidden', reactions.length === 0);
            likeGray.classList.toggle('hidden', reactions.length > 0);
            postItem.querySelector('.reactions').value = JSON.stringify(reactions);
        }

        // Función para obtener el ID del usuario
        function getUserId() {
            var stringId = localStorage.getItem('YCuserId');
            return stringId ? parseInt(stringId) : null;
        }

        // Función para eliminar una publicación
        function deletePost(IdPost) {
            $('#spinnerOverlay').removeClass('hidden'); // Mostramos el spinner
            var url = `http://localhost:5069/api/Post/DeletePost/${IdPost}`;
            
            fetch(url, { method: 'DELETE' })
            .then(function(response) { 
                if (!response.ok){
                    $('#spinnerOverlay').addClass('hidden');
                    showToast('danger', 'No se pudo eliminar el post debido a un error.');
                    window.location.reload();
                    throw new Error('Falló la petición');
                }
                else {
                    localStorage.removeItem('toastState');
                    showToast('success', 'Se eliminó el post con éxito.');
                    $('#spinnerOverlay').addClass('hidden');
                    window.location.reload();
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
                
            });
        }


        // Inicializar cuando el contenido esté cargado completamente
        document.addEventListener('DOMContentLoaded', function () {
            initializePosts();
            document.getElementById('postForm').addEventListener('submit', function(event) {
                event.preventDefault(); 
            });
            document.getElementById('editPostForm').addEventListener('submit', function(event) {
                event.preventDefault(); 
            });
            const commentForms = document.querySelectorAll('.commentForm');

  
            const toastState = JSON.parse(localStorage.getItem('toastState'));
            if (toastState) {
                showToast(toastState.type, toastState.message);
                localStorage.removeItem('toastState');
            }
        });

        // Manejador de evento para el botón de envío de nueva publicación
        $('#submitBtn').click(function () {
            var postTitle = $('#PostTitleInput').val();
            var postContent = $('#PostContentInput').val();
            
            if (postTitle.trim() === "" || postContent.trim() === "") {
                showToast('warning', 'Debes llenar todos los campos.');
                return; // Evita que se envíe el formulario
            }

            $('#spinnerOverlay').removeClass('hidden'); // Mostramos el spinner
            var formData = new FormData($('#postForm')[0]);

            $.ajax({
                url: '/api/Post/CreatePost',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    showToast("success", "Se creó el post")
                },
                error: function (xhr, status, error) {
                    showToast("danger", "No se pudo crear el post.")
                    console.error(xhr.responseText);
                },
                complete: function() {
                    window.location.reload();
                }
            });
        });

        // Manejador de evento para el botón de envío de edición de publicación
        $('#EditPostSubmitBtn').click(function () {

            var EditTitle = $("#EditPostTitleInput").val();
            var editContent = editPostMDE.value();

            if (EditTitle.trim() === "" || editContent.trim() === "") {
                showToast('warning', 'Debes llenar todos los campos.');
                return; // Evita que se envíe el formulario
            }

            var dataform = new FormData($('#editPostForm')[0]);

            $('#spinnerOverlay').removeClass('hidden');
            
            $.ajax({
                url: '/api/Post/UpdatePost',
                type: 'POST',
                data: dataform,
                processData: false,
                contentType: false,
                success: function (response) {
                    localStorage.removeItem('toastState');
                    showToast("success", "Se actualizó el post")
                },
                error: function (xhr, status, error) {
                    localStorage.removeItem('toastState');
                    showToast("danger", "No se pudo actualizar el post")
                    console.error(xhr.responseText);
                },
                complete: function() {
                    // Ocultamos el spinner
                    window.location.reload();
                }
            });
        });


        // Función para crear un nuevo toast
        function showToast(type, message) {
            // Crear elemento de toast
            const toast = document.createElement('div');
            toast.classList.add('toast', `toast-${type}`);
            toast.innerHTML = `
                <div class="z-90 flex items-center justify-between p-2 rounded-md">
                    <svg class="w-6 h-6 mr-2 text-yellow-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10" fill="#ffffff" />
                        <line x1="12" y1="8" x2="12" y2="12" stroke="#000000" />
                        <line x1="12" y1="16" x2="12" y2="16" stroke="#000000" />
                    </svg>
                    <div>${message}</div>
                    <div class="toast-close mx-2 p-1 font-bold text-xl">
                        X
                    </div>
                </div>
            `;

                    
            // Agregar evento de clic para cerrar el toast
            toast.querySelector('.toast-close').addEventListener('click', () => {
                toast.style.opacity = 0;
                setTimeout(() => {
                toast.remove();
                }, 500);
                localStorage.removeItem('toastState');
            });

            // Agregar toast al contenedor
            document.getElementById('toastContainer').appendChild(toast);

            // Mostrar el toast con efecto de fade
            setTimeout(() => {
                toast.style.opacity = 1;
            }, 100);

            // Eliminar el toast después de un tiempo
            setTimeout(() => {
                toast.style.opacity = 0;
                setTimeout(() => {
                toast.remove();
                }, 500);
            }, 5000); // Cambiar 5000 por el tiempo deseado en milisegundos
            localStorage.setItem('toastState', JSON.stringify({ type, message }));
        }

        // Ejemplo de uso
        /*showToast('info', 'Info alert! Change a few things up and try submitting again.');
        showToast('danger', 'Danger alert! Change a few things up and try submitting again.');
        showToast('success', 'Success alert! Change a few things up and try submitting again.');
        showToast('warning', 'Warning alert! Change a few things up and try submitting again.');*/
        
        
        function submitComment(postid)
        {
            var commentContent = $("#commentContentInput-"+postid).val();

            
            if (commentContent.trim() === "") {
                showToast('warning', 'Debes llenar todos los campos.');
                return; // Evita que se envíe el formulario
            }

            var userId = getUserId()

            $('#spinnerOverlay').removeClass('hidden'); // Mostramos el spinner
            var data = {
                IdPost: postid,  // Reemplaza 132 con el valor correcto
                IdUser: userId,  // Convertir a entero si es necesario
                Content: commentContent
            };

            var url = 'http://localhost:5069/api/comment/add';

            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
                .then(function (response) {
                    if (!response.ok) console.log(response);
                    return response.json();
                })
                .then(function (data) {
                    $('#spinnerOverlay').addClass('hidden');
                    showToast("success", "Se agregó el comentario")
                    window.location.reload();
                })
                .catch(function (error) {   
                    console.error('Error:', error);
                    showToast("warning", "No se pudo agregar el comentario")
                });
        }


        function deleteComment(commentId)
        {

            $('#spinnerOverlay').removeClass('hidden'); // Mostramos el spinner

            var url = 'http://localhost:5069/api/comment/remove/'+commentId;

            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(function (response) {
                    
                })
                .then(function (data) {
                    $('#spinnerOverlay').addClass('hidden');
                    showToast("success", "Se eliminó el comentario")
                    window.location.reload();
                })
                .catch(function (error) {   
                    console.error('Error:', error);
                    showToast("warning", "No se pudo eliminar el comentario")
                });
        }


        function validateOwner(UserComment, deleteButton)
        {
            
            $.ajax({
                url: '/Auth/ValidateUserOwner',
                type: 'GET',
                data: { username: UserComment },
                success: function (response) {
                    if(response.is_owner) {
                        deleteButton.classList.remove('hidden');
                    } else {
                       deleteButton.remove();
                    }
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }

    </script>
}
